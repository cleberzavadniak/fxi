from time import sleep
import tkinter
from urllib.parse import quote_plus as urlquote, urljoin

from fxi.apps.base import AppBase
from fxi.apps.slideshow import Slide, ImageSlideShow

import requests
from bs4 import BeautifulSoup


class MySlideShow(ImageSlideShow):
    def next(self, *args, **kwargs):
        super().next(*args, **kwargs)

        num_slides = len(self.slides)
        self.app.info(f'Slide {self.index} of {num_slides}')

        if num_slides > 3 and self.index > (num_slides - 3):
            self.app.enqueue(self.app.load_next_page)

    def create_slide(self, item):
        img = item.find('img')
        if not img:
            return

        img_anchor = img.parent
        img_anchor_href = img_anchor.attrs['href']
        img_id = img_anchor_href.split('/')[-1]
        self.app.last_image = img_id

        img_src = img.attrs['src']

        date = item.find('span', class_='created_time') |> .text
        ptext = item.find('p', class_='pintaram-text').text

        slide = Slide(self.app, relief=tkinter.SUNKEN)
        slide.text = ptext
        slide.date = date
        slide.set_image_from_url(img_src)
        self.slides.append(slide)


class App(AppBase):
    title = 'Insta'

    def init(self):
        self.entries = {}
        self.base_url = 'https://www.pintaram.com'

        self.favorites = self.get_config('favorites', {})

    def cmd__s(self, *words):
        term = words |> ' '.join |> urlquote

        with self.info(f'Searching for "{term}"...'):
            soup = self.get_soup(f'{self.base_url}/search?query={term}')

        monitor = self.open_monitor(f'Search: {term}')
        index = 0
        self.entries = {}

        def show_entry(anchor):
            nonlocal monitor
            nonlocal index

            href = anchor.attrs.get('href', None)
            if href is None:
                return

            url = urljoin(self.base_url, href)

            img = anchor.find('img')
            thumbnail_url = img.attrs['src']

            result_name_div = anchor.find('div', class_='search-result-name')
            div1, div2, *rest = result_name_div.find_all('div')

            name = div1.text
            nick = div2.text

            monitor.h2(f'{index:>3}: {name}')
            slot = monitor.add_slot()
            self.enqueue(slot.write_image_from_url, thumbnail_url)
            monitor.write(nick)
            monitor.hr()
            self.entries[index] = (name, url)
            index += 1

        content_rows = soup.find_all('div', class_='content-row')
        for row in content_rows[0:50]:
            row.find_all('a') |> map$(show_entry) |> tuple

    def cmd__v(self, index):
        if index == 'n':
            index = self.current_index + 1
        elif index == 'p':
            index = self.current_index - 1
        else:
            index = int(index)

        name, url = self.entries[index]

        with self.info(f'Downloading {name}...'):
            soup = self.get_soup(url)

        monitor = self.open_monitor(name)
        self.current_url = url
        self.current_name = name
        self.current_index = index
        self.last_image = None

        soup.find_all('div', class_='grid-item') |> map$(self.show_photo) |> tuple

    def cmd__ss(self, index):
        if index == 'n':
            index = self.current_index + 1
        elif index == 'p':
            index = self.current_index - 1
        else:
            index = int(index)

        name, url = self.entries[index]

        self.current_url = url
        self.current_name = name
        self.current_index = index
        self.last_image = None

        self.slideshow = MySlideShow(self, [])

        with self.info(f'Downloading {name}...'):
            soup = self.get_soup(url)

        with self.info('Creating slides...'):
            soup.find_all('div', class_='grid-item') |> map$(self.slideshow.create_slide) |> tuple

        self.enqueue(self.do_render_slideshow)
        self.slideshow.render()

    def do_render_slideshow(self):
        if len(self.slideshow.slides) == 0 or self.slideshow.slides[0].image_reference is None:
            sleep(0.5)
            self.enqueue(self.do_render_slideshow)
            return

        self.slideshow.refresh()

    def load_next_page(self):
        with self.info('Loading next page...'):
            response = requests.post(self.current_url, data={'nextMaxId': self.last_image})
            response.raise_for_status()

        soup = response.content |> BeautifulSoup
        with self.info('Creating slides...'):
            soup.find_all('div', class_='grid-item') |> map$(self.slideshow.create_slide) |> tuple

    def show_photo(self, item):
        img = item.find('img')
        if not img:
            return

        monitor = self.current_monitor

        img_anchor = img.parent
        img_anchor_href = img_anchor.attrs['href']
        img_id = img_anchor_href.split('/')[-1]
        self.last_image = img_id

        slot = monitor.add_slot()
        self.enqueue(slot.write_image_from_url, img.attrs['src'])

        item.find('span', class_='created_time') |> .text |> monitor.write

        ptext = item.find('p', class_='pintaram-text')
        ptext?.text |> monitor.write

        monitor.hr()

    @staticmethod
    def get_soup(url, **kwargs):
        response = requests.get(url, **kwargs)
        response.raise_for_status()
        return response.content |> BeautifulSoup

    def cmd__f(self, *comment_parts):
        comment = comment_parts |> ' '.join

        name, url = self.entries[self.current_index]
        self.favorites[name] = (url, comment)
        self.set_config('favorites', self.favorites)

    def cmd__lsf(self):
        monitor = self.open_monitor('Favorites')
        self.entries = {}
        for index, (name, (url, comment)) in enumerate(self.favorites.items()):
            self.entries[index] = name, url
            monitor.write(f'{index:>4}: {name} | {comment}')
