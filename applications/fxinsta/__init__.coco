import re
from time import sleep

from fxi.apps import AppBase, HTTPMixin
from fxi.slideshow import Slide, ImageSlideShow


def sanitize_string(s):
    return re.sub(r'[^a-zA-Z0-9_]', '__', s)


class MySlide(Slide):
    def on_refresh(self, *args, **kwargs):
        if self.text:
            for word in self.text.split(' '):
                if word.startswith('@'):
                    term = word[1:]
                    self.app.copy_to_clipboard(term)
                    return

            for word in self.text.split(' '):
                if word.startswith('#'):
                    term = word[1:]
                    self.app.copy_to_clipboard(term)
                    return


class MySlideShow(ImageSlideShow):
    def init(self):
        self.username = None
        self.full = False

    def on_next(self, *args, **kwargs):
        num_slides = len(self.slides)
        if not self.full and num_slides > 5 and self.index > (num_slides - 4):
            self.app.enqueue(self.app.load_next_page)

    def create_slide(self, item):
        img = item('img') |> .eq(0)
        if not img:
            return

        h3_username = item('h3.user-username') |> .eq(0)
        username = h3_username('div') |> .eq(0) |> .text()

        if self.username is None:
            self.username = username
        elif self.username != username:
            self.full = True
            self.app.info('Last slide reached!')
            return

        img_anchor = img.parent() |> .eq(0)
        img_anchor_href = img_anchor.attr('href')
        img_id = img_anchor_href.split('/')[-1]
        self.app.last_image = img_id

        img_src = img.attr('src')

        date = item('span.created_time') |> .eq(0) |> .text()
        ptext = item('p.pintaram-text') |> .text()

        slide = MySlide(self.app, self)
        slide.text = ptext |> sanitize_string
        slide.date = date
        slide.subtitle = username |> sanitize_string
        slide.set_image_from_url(img_src)
        self.slides.append(slide)
        slide.render(self.title |> sanitize_string)


class App(HTTPMixin, AppBase):
    title = 'Insta'

    def init(self):
        self.entries = {}
        self.base_url = 'https://www.pintaram.com'
        self.slideshow = None
        self.loading_next_page = False

        self.favorites = self.get_config('favorites', {})

    def cmd__s(self, *words):
        """
        Search

        Usage: s <term>
        """
        term = words |> ' '.join |> self.urlquote

        with self.info(f'Searching for "{term}"...'):
            html = self.request(f'{self.base_url}/search?query={term}')

        monitor = self.open_monitor(f'Search: {term}')
        index = 0
        self.entries = {}

        def show_entry(anchor):
            nonlocal monitor
            nonlocal index

            href = anchor.attr('href')
            if href is None:
                return

            url = self.urljoin(self.base_url, href)
            favorite = url in self.favorites

            img = anchor('img') |> .eq(0)
            thumbnail_url = img.attr('src')

            result_name_div = anchor('div.search-result-name') |> .eq(0)
            div1, div2, *rest = result_name_div('div').items()

            name = div1.text()
            nick = div2.text()

            name = sanitize_string(name)
            nick = sanitize_string(nick)

            if favorite:
                monitor.h2(f'{index:>3}: {name} (Favorite)')
            else:
                monitor.h2(f'{index:>3}: {name}')

            slot = monitor.add_slot()
            self.enqueue(slot.write_image_from_url, thumbnail_url)

            monitor.write(nick)
            monitor.hr()

            self.entries[index] = (name, url)
            index += 1

        content_rows = html('div.content-row')
        for row in content_rows.items()$[0:50]:
            row('a') |> .items() |> map$(show_entry) |> tuple

    def cmd__list(self, index):
        """
        Displays the entry as a list, one post on top
        of another.

        Usage: list <index>
        """
        if index == 'n':
            index = self.current_index + 1
        elif index == 'p':
            index = self.current_index - 1
        elif index == 'c':
            index = self.current_index
        else:
            index = int(index)

        name, url = self.entries[index]

        with self.info(f'Downloading {name}...'):
            html = self.request(url)

        monitor = self.open_monitor(name)
        self.current_url = url
        self.current_name = name
        self.current_index = index
        self.last_image = None

        html('div.grid-item') |> .items() |> map$(self.show_photo) |> tuple

    def cmd__v(self, index):
        """
        View posts as a slideshow.

        Usage: v <index>
        """
        if index == 'n':
            index = self.current_index + 1
        elif index == 'p':
            index = self.current_index - 1
        elif index == 'c':
            index = self.current_index
        else:
            index = int(index)

        name, url = self.entries[index]

        self.current_url = url
        self.current_name = name
        self.current_index = index
        self.last_image = None

        self.slideshow?.close()

        if url in self.favorites:
            _, description = self.favorites[url]
            title = f'{name} [{description}]'
        else:
            title = name

        self.slideshow = MySlideShow(self, sanitize_string(title), [])

        with self.info(f'Downloading {name}...'):
            html = self.request(url)

        with self.info('Creating slides...'):
            html('div.grid-item') |> .items() |> map$(self.slideshow.create_slide) |> tuple

        self.enqueue(self.do_render_slideshow)
        self.slideshow.render()

    def do_render_slideshow(self):
        if len(self.slideshow.slides) == 0 or self.slideshow.slides[0].image_reference is None:
            sleep(0.5)
            self.enqueue(self.do_render_slideshow)
            return

        self.slideshow.refresh()
        self.enqueue(self.load_next_page)

    def cmd__lnp(self):
        """
        Load next page, no matter which you're looking right now

        Usage: lnp
        """
        self.load_next_page()

    def load_next_page(self):
        if self.loading_next_page:
            return
        self.loading_next_page = True

        try:
            self.do_load_next_page()
        except Exception as ex:
            the_type = type(ex)
            self.info(f'{the_type}: {ex}')

        self.loading_next_page = False

    def do_load_next_page(self):
        html = self.request(
            self.current_url,
            message='Loading next page...',
            method='post',
            data={'nextMaxId': self.last_image}
        )

        with self.info('Creating slides...'):
            html('div.grid-item') |> .items() |> map$(self.slideshow.create_slide) |> tuple

    def show_photo(self, item):
        img = item('img') |> .eq(0)
        if not img:
            return

        monitor = self.current_monitor

        img_anchor = img.parent
        img_anchor_href = img_anchor.attr('href')
        img_id = img_anchor_href.split('/')[-1]
        self.last_image = img_id

        slot = monitor.add_slot()
        self.enqueue(slot.write_image_from_url, img.attr('src'))

        item('span.created_time') |> .eq(0) |> .text() |> monitor.write

        ptext = item('p.pintaram-text')
        ptext?.text() |> monitor.write

        monitor.hr()

    def cmd__f(self, *comment_parts):
        """
        Save a feed/account as favorite.

        Usage: f <tag1>[ <tag2>[ <tag3>[...]]]
        """
        comment = comment_parts |> ' '.join

        name, url = self.entries[self.current_index]
        self.favorites[url] = (name, comment)
        self.set_config('favorites', self.favorites)

        if self.slideshow:
            _, description = self.favorites[url]
            new_title = f'{self.slideshow.title} [FAV: {description}]'
            self.slideshow.title = new_title
            for slide in self.slideshow.slides:
                slide.set_title(new_title)

    def cmd__lsf(self):
        """
        List favorites

        Usage: lsf
        """

        monitor = self.open_monitor('Favorites')
        self.entries = {}
        for index, (url, (name, comment)) in enumerate(self.favorites.items()):
            self.entries[index] = name, url
            monitor.write(f'{index:>4}: {name} | {comment}')
