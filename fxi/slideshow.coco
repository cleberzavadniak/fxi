from io import BytesIO
import tkinter
from tkinter import ttk

from PIL.ImageTk import PhotoImage
from PIL import Image
import requests

from fxi.utils import apply_surrogates


class Slide(ttk.Frame):
    def __init__(self, app, slideshow, *args, **kwargs):
        self.image_reference = None
        self.title_label = None
        self.subtitle = None
        self.text = None
        self.text_label = None
        self.date = None

        self.app = app
        self.slideshow = slideshow

        self.rendered = False

        super().__init__(app.tab.interior, *args, **kwargs)

        # TODO: move this Labels to another method!
        self.image_slot = ttk.Label(
            self,
            anchor=tkinter.N,
            justify=tkinter.CENTER,
        )
        self.image_slot.pack(expand=True, fill=tkinter.X)

        label = ttk.Label(
            self,
            text='Loading...',
            anchor=tkinter.W,
            justify=tkinter.LEFT,
            style=f'h1.TLabel'
        )
        label.pack(expand=True, fill=tkinter.X)
        self.title_label = label

        self.init()

    def init(self):
        pass

    @property
    def width(self):
        return self.master.master.winfo_width()

    @property
    def height(self):
        return self.master.master.winfo_height()

    def set_image_from_url(self, url, thumb_dimensions=None):
        self.app.enqueue(self.do_set_image_from_url, url, thumb_dimensions)

    def set_title(self, title):
        title = apply_surrogates(title)
        self.title = title

        if self.rendered:
            self.title_label.configure(text=title)

    def set_subtitle(self, title):
        title = apply_surrogates(title)
        self.subtitle = title

    def do_set_image_from_url(self, url, thumb_dimensions=None):
        if not self.app.alive:
            return

        response = requests.get(url)
        if response.status_code != 200:
            print(response.status_code)
            print(response.content)
            return

        image_data = response.content
        image_buffer = BytesIO(image_data)
        image = Image.open(image_buffer)

        original_dimensions = image.size

        if thumb_dimensions:
            width, height = thumb_dimensions
        else:
            width, height = image.size

        max_width = self.width * 0.95
        max_height = self.height * 0.80

        pw = max_width / width
        ph = max_height / height
        p = min(ph, pw)
        if p > 1:
            p = 1

        image.thumbnail((
            int(width * p),
            int(height * p)
        ))

        photoimage = PhotoImage(image)
        self.image_reference = photoimage
        self.image_slot.configure(image=photoimage)

        label = ttk.Label(
            self,
            text=f'(Image dimensions: {original_dimensions} -> {image.size})',
            anchor=tkinter.W,
            justify=tkinter.LEFT,
            style=f'small.TLabel'
        )
        label.pack(expand=True, fill=tkinter.X)

    def render(self, title):
        if self.rendered:
            return

        text = apply_surrogates(title)
        self.title_label.configure(text=text)

        if self.subtitle:
            label = ttk.Label(
                self,
                text=apply_surrogates(self.subtitle),
                anchor=tkinter.W,
                justify=tkinter.LEFT,
                style=f'h2.TLabel'
            )
            label.pack(expand=True, fill=tkinter.X)

        if self.text:
            label = ttk.Label(
                self,
                text=apply_surrogates(self.text),
                anchor=tkinter.W,
                justify=tkinter.LEFT,
                wraplength=self.width
            )
            label.pack(expand=True, fill=tkinter.BOTH)
            self.text_label = label

        if self.date:
            label = ttk.Label(
                self,
                text=apply_surrogates(self.date),
                anchor=tkinter.W,
                justify=tkinter.LEFT,
                wraplength=self.width
            )
            label.pack(expand=True, fill=tkinter.BOTH)

        self.render_slide_number()

        self.rendered = True

    def render_slide_number(self):
        self.slide_number_marker = label = ttk.Label(
            self,
            anchor=tkinter.W,
            justify=tkinter.LEFT,
            wraplength=self.width
        )
        label.pack(expand=True, fill=tkinter.BOTH)

    def on_refresh(self):
        pass

    def refresh(self):
        num_slides = len(self.slideshow.slides)
        idx = self.slideshow.index + 1
        self.slide_number_marker['text'] = f'Slide {idx} of {num_slides}'

        self.pack(expand=tkinter.TRUE, fill=tkinter.BOTH)
        self.on_refresh()

    def destroy(self):
        self.image_reference = None
        super().destroy()


class ImageSlideShow(ttk.Frame):
    def __init__(self, app, title, slides, *args, **kwargs):
        self.app = app
        self.title = title
        self.tab = app.tab
        self.index = 0
        self.slides = slides

        self.binded_functions = []

        self.init()

    def init(self):
        pass

    def on_render(self):
        pass

    def render(self):
        self.app.close_monitor()
        self.app.current_monitor = self

        # TODO: create a method in fxi to do this:
        self.app.fxi.command_line.bind("<Left>", self.previous) |> self.binded_functions.append
        self.app.fxi.command_line.bind("<Right>", self.next) |> self.binded_functions.append

        self.refresh()
        self.on_render()

    @property
    def current_slide(self):
        try:
            return self.slides[self.index]
        except IndexError:
            return None

    def clear(self):
        self.current_slide?.pack_forget()

    def refresh(self):
        self.current_slide.refresh()

    def on_next(self):
        pass

    def next(self, event=None):
        if self.index + 1 >= len(self.slides):
            return

        self.clear()
        self.index += 1
        self.refresh()
        self.on_next()

    def on_previous(self):
        pass

    def previous(self, event=None):
        if self.index - 1 < 0:
            return

        self.clear()
        self.index -= 1
        self.refresh()
        self.on_previous()

    def on_close(self):
        pass

    def close(self):
        for fid in self.binded_functions:
            self.tab.unbind_all(fid)

        for slide in self.slides:
            slide.destroy()

        self.on_close()
