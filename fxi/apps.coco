import json
from os import environ
from pathlib import PosixPath
from queue import Queue, Empty
import threading
import tkinter
from tkinter import ttk
import time
from urllib.parse import quote_plus as urlquote, urljoin, urlparse

import requests
from pyquery import PyQuery

from fxi.widgets.scrollables import VerticalScrolledFrame
from fxi.monitor import Monitor
from fxi.utils import apply_surrogates


cmd_names_map = {
    '/': 'SLASH',
    '.': 'DOT',
    ':': 'COLON',
    ';': 'SEMICOLON'
}


class InfoContext:
    def __init__(self, app, message):
        self.app = app
        self.message = message
        self.info(self.message)

    def info(self, message):
        if message:
            print(f'{self.app.title}: {message}')
            message = apply_surrogates(message)
        self.app.fxi.info(message)

    def __enter__(self):
        pass

    def __exit__(self, ex_type, ex_value, traceback):
        if ex_type:
            msg = f'{ex_type}: {ex_value}'
            self.info(msg)
            print(traceback)
            return
        self.info(None)


class HTTPMixin:
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.urljoin = urljoin
        self.urlquote = urlquote

    def get_referer(self, url):
        parts = urlparse(url)
        return parts.hostname

    def request(self, url, message=None, method='get', **kwargs):
        method = getattr(requests, method.lower())

        # TODO: detect if the response mime type is content/json

        referer = self.get_referer(url)
        headers={
            'Referer': referer,
            # 'Origin': 'https://docs.dhtmlx.com',
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0',
        }
        user_headers = kwargs.pop('headers', {})
        headers.update(user_headers)

        message = message or f'Loading {url}...'

        with self.info(message):
            response = method(url, headers=headers, **kwargs)
            response.raise_for_status()
        return response.content |> PyQuery


class AppBase:
    title = 'App Title'

    def __init__(self, fxi):
        self.fxi = fxi
        self.notebook = fxi.notebook
        self.tab = VerticalScrolledFrame(
            self.notebook,
            relief=tkinter.SUNKEN,
        )
        self.alive = True

        self.main_list = None
        self.current_monitor = None

        self.unsaved_config = {}
        self.load_config()

        self.tasks_queue = Queue()
        self.threads_pool = []
        self.adding_thread_to_pool = False

    def init(self):
        pass

    def quit(self):
        self.alive = False
        self.tab.destroy()
        self.persist_config()

    def new_thread(self, method, args=None, kwargs=None):
        args = args or ()
        kwargs = kwargs or {}
        t = threading.Thread(target=method, args=args, kwargs=kwargs)
        t.start()
        return t

    def info(self, message=None):
        return InfoContext(self, message)

    def render(self):
        pass

    def render_app(self):
        self.render()
        self.notebook.add_app(self)
        return self.tab

    def refresh(self):
        if self.main_list:
            self.main_list.refresh()

    def handle_command(self, head, args):
        cmd_name = cmd_names_map.get(head, head)

        method_name = f'cmd__{cmd_name}'
        method = getattr(self, method_name, None)
        if method:
            t = threading.Thread(target=method, args=args)
            t.start()
            return

        self.info(f'Unknown command: {cmd_name}')

    def cmd__help(self):
        """Show help about available commands"""

        monitor = self.open_monitor(f'{self.title}: Help')
        for entry_name in dir(self):
            if entry_name.startswith('cmd__'):
                name = entry_name.replace('cmd__', '')
                method = getattr(self, entry_name)
                doc = method.__doc__

                monitor.h2(name)
                if doc:
                    monitor.write_fixed(doc)
                monitor.hr()

    def cmd__status(self):
        monitor = self.open_monitor(f'{self.title}: Status')

        monitor.write(f'Threads pool size: {self.threads_counter}')

    def open_monitor(self, name=None):
        self.close_monitor()

        monitor = Monitor(self, relief=tkinter.RIDGE)

        if name:
            monitor.h1(name)

        self.current_monitor = monitor
        self.show_current_monitor()
        return monitor

    def show_current_monitor(self):
        self.current_monitor?.pack(expand=True, fill='both')

    def close_monitor(self):
        self.current_monitor?.close()

    def h1(self, title):
        label = ttk.Label(
            self.tab.interior,
            text=f'{title}',
            anchor=tkinter.W,
            justify=tkinter.LEFT,
            style='h1.TLabel'
        )

        label.pack(expand=True, fill='x')

    def get_config_or_ask(self, key, hidden=False, label=None, default=None):
        if key in self.config:
            return self.config[key]

        label = label or key

        if default is not None:
            label = f'{label} [{default}]'

        value = self.fxi.prompt.ask(label, hidden=hidden) or default
        self.unsaved_config[key] = value
        return value

    def load_config(self):
        basedir = PosixPath(environ['HOME']) / '.config' / 'fxi' / 'apps'
        basedir.mkdir(exist_ok=True, parents=True)
        filename = (self.title |> .lower() |> .replace(' ', '_')) |> (+)$(?, '.json')
        path = basedir / filename

        self.config_path = path

        if not path.exists():
            with path.open('w') as file_object:
                pass
            self.config = {}
            return

        with path.open('r') as file_object:
            content = file_object.read()

            if not content:
                self.config = {}
                return

            self.config = json.loads(content)

    def reload_config(self):
        with self.config_path.open('r') as file_object:
            content = file_object.read()
            if not content:
                return
        self.config = json.loads(content)

    def set_config(self, key, value):
        self.reload_config()
        self.config[key] = value
        self.persist_config()

    def get_config(self, key, default=None):
        return self.config.get(key, default)

    def persist_unsaved_config(self):
        for key, value in tuple(self.unsaved_config.items()):
            self.config[key] = value
            del self.unsaved_config[key]
        self.persist_config()

    def persist_config(self):
        with self.config_path.open('w') as file_object:
            json.dump(self.config, file_object)

    def enqueue(self, function, *args, **kwargs):
        self.tasks_queue.put((function, args, kwargs))

        num_threads = len(self.threads_pool)
        qsize = self.tasks_queue.qsize()

        if num_threads == 0 and qsize > 0:
            self.add_thread_to_pool()
        elif qsize > num_threads / 2:
            self.add_thread_to_pool()

    def tasks_thread(self):
        sleep_time = 0.5
        max_inactivity_time = 60
        inactivity_time_counter = 0

        while self.alive and inactivity_time_counter < max_inactivity_time:
            try:
                task = self.tasks_queue.get(timeout=1)
            except Empty:
                time.sleep(sleep_time)
                inactivity_time_counter += sleep_time
                continue

            inactivity_time_counter = 0
            function, args, kwargs = task
            try:
                function(*args, **kwargs)
            except Exception as ex:
                the_type = type(ex)
                print(f'{the_type}: {ex}')
                continue

    @property
    def threads_counter(self):
        for thread in tuple(self.threads_pool):
            if not thread.is_alive():
                self.threads_pool.remove(thread)

        return len(self.threads_pool)

    def add_thread_to_pool(self):
        if self.adding_thread_to_pool:
            return
        self.adding_thread_to_pool = True

        t = threading.Thread(target=self.tasks_thread)
        t.start()
        self.threads_pool.append(t)
        time.sleep(0.5)  # We don't want TOO MUCH threads being created so fast.
        self.adding_thread_to_pool = False

    def ask(self, *args, **kwargs):
        return self.fxi.prompt.ask(*args, **kwargs)

    def top(self):
        self.tab.master.master.canvas.yview_scroll(-1000, "pages")

    def page_down(self):
        self.tab.master.master.page_down()

    def cmd__later(self, *parts):
        """Save commands for later (instead of opening new tabs)"""
        cmd = parts |> ' '.join

        if not cmd:
            return self.ls_later_list()

        key = 'app:later_list'
        later_list = set(self.get_config(key, []))
        later_list.add(cmd)
        self.set_config(key, list(later_list))
        self.info(f'Saved "{cmd}" for later.')

    def ls_later_list(self):
        key = 'app:later_list'
        later_list = self.get_config(key, [])

        monitor = self.open_monitor('Later List')
        for index, item in enumerate(later_list):
            monitor.write(f'{index:>4}: {item}')

    def copy_to_clipboard(self, string):
        self.tab.clipboard_clear()
        self.tab.clipboard_append(string)
        self.info(f'Copied {string} to clipboard')
